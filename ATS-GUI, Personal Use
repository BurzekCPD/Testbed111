import tkinter as tk
from matplotlib.figure import Figure  # type: ignore
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg  # type: ignore

def create_chart():
    try:
        # Retrieve and process user input for x and y values
        x_values = list(map(float, x_entry.get().split(',')))
        y_values = list(map(float, y_entry.get().split(',')))
        
        # Ensure x and y lists have the same length
        if len(x_values) != len(y_values):
            error_label.config(text="Error: x and y values must have the same number of points.")
            return
        else:
            error_label.config(text="")  # Clear error message if lengths match
    except ValueError:
        error_label.config(text="Error: Please enter numeric values only, separated by commas.")
        return

    # Create a figure and add a plot
    fig = Figure(figsize=(5, 4), dpi=100)
    ax = fig.add_subplot(111)
    
    # Plot with markers, lines, and grid
    ax.plot(x_values, y_values, marker='o', linestyle='-', color='b', markersize=8)
    ax.grid(True, which='both', linestyle='--', linewidth=0.5)
    ax.set_title("Custom RPM x Torque Visualizer")
    ax.set_xlabel("RPM")
    ax.set_ylabel("Torque")

    # Dynamically adjust the axis limits based on the data
    ax.set_xlim(min(x_values) - 0.1 * abs(min(x_values)), max(x_values) + 0.1 * abs(max(x_values)))
    ax.set_ylim(min(y_values) - 0.1 * abs(min(y_values)), max(y_values) + 0.1 * abs(max(y_values)))
    
    # Label each point with its coordinates
    for (x, y) in zip(x_values, y_values):
        ax.text(x, y, f"({x}, {y})", fontsize=8, ha='right')

    # Clear previous canvas and draw new chart
    for widget in chart_frame.winfo_children():
        widget.destroy()
    canvas = FigureCanvasTkAgg(fig, master=chart_frame)
    canvas.draw()
    canvas.get_tk_widget().pack()

def clear_fields():
    # Clear the entry fields and error label
    x_entry.delete(0, tk.END)
    y_entry.delete(0, tk.END)
    error_label.config(text="")

# Set up the GUI window
root = tk.Tk()
root.title("Enhanced Chart Application")
root.geometry("600x500")

# Entry fields for x and y values
input_frame = tk.Frame(root)
input_frame.pack(pady=10)

tk.Label(input_frame, text="Enter RPM values (comma-separated, no spacing): ").grid(row=0, column=0)
x_entry = tk.Entry(input_frame, width=30)
x_entry.grid(row=0, column=1)

tk.Label(input_frame, text="Enter Torque values (comma-separated, no spacing): ").grid(row=1, column=0)
y_entry = tk.Entry(input_frame, width=30)
y_entry.grid(row=1, column=1)

# Error label for feedback
error_label = tk.Label(root, text="", fg="red")
error_label.pack()

# Frame for the chart
chart_frame = tk.Frame(root)
chart_frame.pack(padx=10, pady=10)

# Button to generate the chart
generate_button = tk.Button(root, text="Generate Chart", command=create_chart)
generate_button.pack(pady=20)

# Button to clear the fields
clear_button = tk.Button(root, text="Clear Fields", command=clear_fields)
clear_button.pack(pady=10)

root.mainloop()
